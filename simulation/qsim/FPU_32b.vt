// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2025 20:37:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FPU_32b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FPU_32b_vlg_sample_tst(
	RST,
	clk_i,
	fpu_op_i,
	mode_i,
	opa_i,
	opb_i,
	sampler_tx
);
input  RST;
input  clk_i;
input  fpu_op_i;
input [1:0] mode_i;
input [31:0] opa_i;
input [31:0] opb_i;
output sampler_tx;

reg sample;
time current_time;
always @(RST or clk_i or fpu_op_i or mode_i or opa_i or opb_i)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FPU_32b_vlg_check_tst (
	ine,
	inf,
	overflow,
	result,
	underflow,
	zero,
	sampler_rx
);
input  ine;
input  inf;
input  overflow;
input [31:0] result;
input  underflow;
input  zero;
input sampler_rx;

reg  ine_expected;
reg  inf_expected;
reg  overflow_expected;
reg [31:0] result_expected;
reg  underflow_expected;
reg  zero_expected;

reg  ine_prev;
reg  inf_prev;
reg  overflow_prev;
reg [31:0] result_prev;
reg  underflow_prev;
reg  zero_prev;

reg  ine_expected_prev;
reg  inf_expected_prev;
reg  overflow_expected_prev;
reg [31:0] result_expected_prev;
reg  underflow_expected_prev;
reg  zero_expected_prev;

reg  last_ine_exp;
reg  last_inf_exp;
reg  last_overflow_exp;
reg [31:0] last_result_exp;
reg  last_underflow_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	ine_prev = ine;
	inf_prev = inf;
	overflow_prev = overflow;
	result_prev = result;
	underflow_prev = underflow;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	ine_expected_prev = ine_expected;
	inf_expected_prev = inf_expected;
	overflow_expected_prev = overflow_expected;
	result_expected_prev = result_expected;
	underflow_expected_prev = underflow_expected;
	zero_expected_prev = zero_expected;
end



// expected ine
initial
begin
	ine_expected = 1'bX;
end 

// expected inf
initial
begin
	inf_expected = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 

// expected underflow
initial
begin
	underflow_expected = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(ine_expected or ine or inf_expected or inf or overflow_expected or overflow or result_expected or result or underflow_expected or underflow or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ine = %b | expected inf = %b | expected overflow = %b | expected result = %b | expected underflow = %b | expected zero = %b | ",ine_expected_prev,inf_expected_prev,overflow_expected_prev,result_expected_prev,underflow_expected_prev,zero_expected_prev);
	$display("| real ine = %b | real inf = %b | real overflow = %b | real result = %b | real underflow = %b | real zero = %b | ",ine_prev,inf_prev,overflow_prev,result_prev,underflow_prev,zero_prev);
`endif
	if (
		( ine_expected_prev !== 1'bx ) && ( ine_prev !== ine_expected_prev )
		&& ((ine_expected_prev !== last_ine_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ine :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ine_expected_prev);
		$display ("     Real value = %b", ine_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ine_exp = ine_expected_prev;
	end
	if (
		( inf_expected_prev !== 1'bx ) && ( inf_prev !== inf_expected_prev )
		&& ((inf_expected_prev !== last_inf_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inf_expected_prev);
		$display ("     Real value = %b", inf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inf_exp = inf_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end
	if (
		( underflow_expected_prev !== 1'bx ) && ( underflow_prev !== underflow_expected_prev )
		&& ((underflow_expected_prev !== last_underflow_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port underflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", underflow_expected_prev);
		$display ("     Real value = %b", underflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_underflow_exp = underflow_expected_prev;
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FPU_32b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg RST;
reg clk_i;
reg fpu_op_i;
reg [1:0] mode_i;
reg [31:0] opa_i;
reg [31:0] opb_i;
// wires                                               
wire ine;
wire inf;
wire overflow;
wire [31:0] result;
wire underflow;
wire zero;

wire sampler;                             

// assign statements (if any)                          
FPU_32b i1 (
// port map - connection between master ports and signals/registers   
	.RST(RST),
	.clk_i(clk_i),
	.fpu_op_i(fpu_op_i),
	.ine(ine),
	.inf(inf),
	.mode_i(mode_i),
	.opa_i(opa_i),
	.opb_i(opb_i),
	.overflow(overflow),
	.result(result),
	.underflow(underflow),
	.zero(zero)
);

// RST
initial
begin
	RST = 1'b1;
	RST = #110000 1'b0;
	RST = #50000 1'b1;
	RST = #50000 1'b0;
end 

// clk_i
always
begin
	clk_i = 1'b0;
	clk_i = #50000 1'b1;
	#50000;
end 

// fpu_op_i
initial
begin
	fpu_op_i = 1'b0;
end 
// mode_i[ 1 ]
initial
begin
	mode_i[1] = 1'b0;
end 
// mode_i[ 0 ]
initial
begin
	mode_i[0] = 1'b0;
end 
// opa_i[ 31 ]
initial
begin
	opa_i[31] = 1'b0;
end 
// opa_i[ 30 ]
initial
begin
	opa_i[30] = 1'b1;
end 
// opa_i[ 29 ]
initial
begin
	opa_i[29] = 1'b0;
end 
// opa_i[ 28 ]
initial
begin
	opa_i[28] = 1'b0;
end 
// opa_i[ 27 ]
initial
begin
	opa_i[27] = 1'b0;
end 
// opa_i[ 26 ]
initial
begin
	opa_i[26] = 1'b0;
end 
// opa_i[ 25 ]
initial
begin
	opa_i[25] = 1'b0;
end 
// opa_i[ 24 ]
initial
begin
	opa_i[24] = 1'b1;
end 
// opa_i[ 23 ]
initial
begin
	opa_i[23] = 1'b0;
end 
// opa_i[ 22 ]
initial
begin
	opa_i[22] = 1'b1;
end 
// opa_i[ 21 ]
initial
begin
	opa_i[21] = 1'b0;
end 
// opa_i[ 20 ]
initial
begin
	opa_i[20] = 1'b0;
end 
// opa_i[ 19 ]
initial
begin
	opa_i[19] = 1'b1;
end 
// opa_i[ 18 ]
initial
begin
	opa_i[18] = 1'b0;
end 
// opa_i[ 17 ]
initial
begin
	opa_i[17] = 1'b1;
end 
// opa_i[ 16 ]
initial
begin
	opa_i[16] = 1'b0;
end 
// opa_i[ 15 ]
initial
begin
	opa_i[15] = 1'b0;
end 
// opa_i[ 14 ]
initial
begin
	opa_i[14] = 1'b0;
end 
// opa_i[ 13 ]
initial
begin
	opa_i[13] = 1'b0;
end 
// opa_i[ 12 ]
initial
begin
	opa_i[12] = 1'b0;
end 
// opa_i[ 11 ]
initial
begin
	opa_i[11] = 1'b0;
end 
// opa_i[ 10 ]
initial
begin
	opa_i[10] = 1'b0;
end 
// opa_i[ 9 ]
initial
begin
	opa_i[9] = 1'b0;
end 
// opa_i[ 8 ]
initial
begin
	opa_i[8] = 1'b0;
end 
// opa_i[ 7 ]
initial
begin
	opa_i[7] = 1'b0;
end 
// opa_i[ 6 ]
initial
begin
	opa_i[6] = 1'b0;
end 
// opa_i[ 5 ]
initial
begin
	opa_i[5] = 1'b0;
end 
// opa_i[ 4 ]
initial
begin
	opa_i[4] = 1'b0;
end 
// opa_i[ 3 ]
initial
begin
	opa_i[3] = 1'b0;
end 
// opa_i[ 2 ]
initial
begin
	opa_i[2] = 1'b0;
end 
// opa_i[ 1 ]
initial
begin
	opa_i[1] = 1'b0;
end 
// opa_i[ 0 ]
initial
begin
	opa_i[0] = 1'b0;
end 
// opb_i[ 31 ]
initial
begin
	opb_i[31] = 1'b0;
end 
// opb_i[ 30 ]
initial
begin
	opb_i[30] = 1'b1;
end 
// opb_i[ 29 ]
initial
begin
	opb_i[29] = 1'b0;
end 
// opb_i[ 28 ]
initial
begin
	opb_i[28] = 1'b0;
end 
// opb_i[ 27 ]
initial
begin
	opb_i[27] = 1'b0;
end 
// opb_i[ 26 ]
initial
begin
	opb_i[26] = 1'b0;
end 
// opb_i[ 25 ]
initial
begin
	opb_i[25] = 1'b1;
end 
// opb_i[ 24 ]
initial
begin
	opb_i[24] = 1'b0;
end 
// opb_i[ 23 ]
initial
begin
	opb_i[23] = 1'b0;
end 
// opb_i[ 22 ]
initial
begin
	opb_i[22] = 1'b0;
end 
// opb_i[ 21 ]
initial
begin
	opb_i[21] = 1'b0;
end 
// opb_i[ 20 ]
initial
begin
	opb_i[20] = 1'b0;
end 
// opb_i[ 19 ]
initial
begin
	opb_i[19] = 1'b0;
end 
// opb_i[ 18 ]
initial
begin
	opb_i[18] = 1'b0;
end 
// opb_i[ 17 ]
initial
begin
	opb_i[17] = 1'b1;
end 
// opb_i[ 16 ]
initial
begin
	opb_i[16] = 1'b0;
end 
// opb_i[ 15 ]
initial
begin
	opb_i[15] = 1'b0;
end 
// opb_i[ 14 ]
initial
begin
	opb_i[14] = 1'b0;
end 
// opb_i[ 13 ]
initial
begin
	opb_i[13] = 1'b0;
end 
// opb_i[ 12 ]
initial
begin
	opb_i[12] = 1'b0;
end 
// opb_i[ 11 ]
initial
begin
	opb_i[11] = 1'b0;
end 
// opb_i[ 10 ]
initial
begin
	opb_i[10] = 1'b0;
end 
// opb_i[ 9 ]
initial
begin
	opb_i[9] = 1'b0;
end 
// opb_i[ 8 ]
initial
begin
	opb_i[8] = 1'b0;
end 
// opb_i[ 7 ]
initial
begin
	opb_i[7] = 1'b0;
end 
// opb_i[ 6 ]
initial
begin
	opb_i[6] = 1'b0;
end 
// opb_i[ 5 ]
initial
begin
	opb_i[5] = 1'b0;
end 
// opb_i[ 4 ]
initial
begin
	opb_i[4] = 1'b0;
end 
// opb_i[ 3 ]
initial
begin
	opb_i[3] = 1'b0;
end 
// opb_i[ 2 ]
initial
begin
	opb_i[2] = 1'b0;
end 
// opb_i[ 1 ]
initial
begin
	opb_i[1] = 1'b0;
end 
// opb_i[ 0 ]
initial
begin
	opb_i[0] = 1'b0;
end 

FPU_32b_vlg_sample_tst tb_sample (
	.RST(RST),
	.clk_i(clk_i),
	.fpu_op_i(fpu_op_i),
	.mode_i(mode_i),
	.opa_i(opa_i),
	.opb_i(opb_i),
	.sampler_tx(sampler)
);

FPU_32b_vlg_check_tst tb_out(
	.ine(ine),
	.inf(inf),
	.overflow(overflow),
	.result(result),
	.underflow(underflow),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

